version: '3.7'
services:
  test-producer:
    build:
      context: ./bridge-connector/test
    networks:
      - preprocessing
    command: python server.py --host 0.0.0.0 --port 8888 --interval_s 1 --dumpfile full_log.json

  bridge-connector:
    build:
      context: ./bridge-connector
    networks:
      - preprocessing
    command:
      bridge-connector --addresses test-producer:8888 --no-ssl --kafka-bootstrap-server kafka:29092

  backend-rest:
    build:
      context: ./backend/rest
    volumes:
      - ./backend/rest:/flask
    environment:
      FLASK_DEBUG: 1
    env_file:
      - .env
    ports:
      - 5000:5000
    networks:
      - backend
      - frontend
    restart: on-failure
    command: flask run -p 5000

  backend-streaming:
    build:
      context: ./backend/streaming
    volumes:
      - ./backend/streaming/:/aiohttp
    ports:
      - 5001:5000
    networks:
      - backend
      - frontend
    restart: on-failure
    command: adev runserver -v -p 5000 streaming/app.py

  frontend:
    build:
      context: ./frontend
    volumes:
      - ./frontend/src:/angular/src
      - ./frontend/package.json:/angular/package.json
      - ./frontend/package-lock.json:/angular/package-lock.json
    command: npm run dev
    ports:
      - 4200:4200
    depends_on:
      - backend-rest
    networks:
      - frontend
    links:
      - "backend-streaming:bs"
      - "backend-rest:br"

  cassandra:
    image: 'docker.io/bitnami/cassandra:3-debian-10'
    ports:
      - '7000:7000'
      - '9042:9042'
    volumes:
      - 'cassandra_data:/bitnami'
    restart: on-failure
    networks:
      - preprocessing
      - backend

  cassandra-load-keyspace:
    image: 'docker.io/bitnami/cassandra:3-debian-10'
    restart: on-failure
    depends_on:
      - cassandra
    volumes:
      - ./logs-preprocessing/cassandra/init/cassandra_schema.cql:/schema.cql
    command: /bin/bash -c "sleep 3 && echo loading cassandra keyspace && cqlsh cassandra -u cassandra -p cassandra -f /schema.cql"
    networks:
      - preprocessing
      - backend

  zookeeper:
    image: wurstmeister/zookeeper
    restart: on-failure
    ports:
      - "2181:2181"
    networks:
      - backend
      - preprocessing

  kafka:
    image: wurstmeister/kafka
    restart: on-failure
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER://kafka:29092,LISTENER_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER:PLAINTEXT,LISTENER_HOST:PLAINTEXT
      KAFKA_LISTENERS: LISTENER_DOCKER://0.0.0.0:29092,LISTENER_HOST://kafka:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    networks:
      - backend
      - preprocessing

  preprocessing-info:
    build:
      context: ./logs-preprocessing/app
      args:
        CORES: "1"
        OUTPUT_MODE: "update"
    restart: on-failure
    depends_on:
      - kafka
      - cassandra
      - cassandra-load-keyspace
    networks:
      - preprocessing

  preprocessing-roster:
    build:
      context: ./logs-preprocessing/app
      args:
        UPDATE_TYPE: "roster"
        FILEPATH: "./main/resources/roster_sample.json"
        TABLE: "roster_update"
        OUTPUT_MODE: "update"
        CORES: "1"
    restart: on-failure
    depends_on:
      - kafka
      - cassandra
      - cassandra-load-keyspace
    networks:
      - preprocessing

  preprocessing-calls:
    build:
      context: ./logs-preprocessing/app
      args:
        FILEPATH: "./main/resources/calls_sample.json"
        UPDATE_TYPE: "calls"
        TABLE: "calls"
        OUTPUT_MODE: "update"
        CORES: "1"
    restart: on-failure
    depends_on:
      - kafka
      - cassandra
      - cassandra-load-keyspace
    networks:
      - preprocessing

  producer:
    build:
      context: ./logs-preprocessing/kafka
    restart: on-failure
    depends_on:
      - kafka
    networks:
      - preprocessing

volumes:
  cassandra_data:
    driver: local

networks:
  backend:
  frontend:
  preprocessing:
